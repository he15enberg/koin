import 'package:koin/features/authentication/models/transaction_model.dart';

class CategoryClassifier {
  static const Map<String, List<String>> _spendKeywords = {
    'bills': [
      'electricity',
      'water',
      'gas',
      'internet',
      'broadband',
      'wifi',
      'mobile bill',
      'phone bill',
      'telecom',
      'utility',
      'bsnl',
      'airtel',
      'jio',
      'vi',
      'vodafone',
      'idea',
      'postpaid',
      'bill payment',
    ],
    'emi': [
      'emi',
      'loan',
      'installment',
      'instalment',
      'equated monthly',
      'home loan',
      'car loan',
      'personal loan',
      'credit card bill',
      'monthly payment',
      'recurring payment',
    ],
    'entertainment': [
      'netflix',
      'amazon prime',
      'hotstar',
      'spotify',
      'youtube premium',
      'movie',
      'cinema',
      'pvr',
      'inox',
      'gaming',
      'game',
      'entertainment',
      'music',
      'streaming',
      'subscription',
      'zee5',
      'disney',
    ],
    'food': [
      'zomato',
      'swiggy',
      'uber eats',
      'food',
      'restaurant',
      'cafe',
      'hotel',
      'dining',
      'breakfast',
      'lunch',
      'dinner',
      'dominos',
      'pizza hut',
      'kfc',
      'mcdonalds',
      'starbucks',
      'burger king',
      'food delivery',
      'meal',
      'snacks',
    ],
    'fuel': [
      'petrol',
      'diesel',
      'fuel',
      'gas station',
      'hp',
      'iocl',
      'bpcl',
      'reliance petrol',
      'shell',
      'essar',
      'fuel station',
      'cng',
    ],
    'groceries': [
      'grocery',
      'super market',
      'big bazaar',
      'reliance fresh',
      'dmart',
      'more',
      'spencer',
      'easyday',
      'food bazaar',
      'vegetables',
      'fruits',
      'provision',
      'kirana',
      'departmental store',
      'hypermarket',
    ],
    'health': [
      'hospital',
      'medical',
      'pharmacy',
      'medicine',
      'doctor',
      'clinic',
      'apollo',
      'fortis',
      'max healthcare',
      'medplus',
      'health',
      'treatment',
      'checkup',
      'lab test',
      'pathology',
      'diagnostic',
    ],
    'investment': [
      'mutual fund',
      'sip',
      'equity',
      'stock',
      'zerodha',
      'groww',
      'upstox',
      'angel broking',
      'investment',
      'trading',
      'portfolio',
      'shares',
      'demat',
      'fd',
      'fixed deposit',
    ],
    'shopping': [
      'amazon',
      'flipkart',
      'myntra',
      'ajio',
      'shopping',
      'purchase',
      'order',
      'ecommerce',
      'online shopping',
      'retail',
      'store',
      'mall',
      'clothing',
      'fashion',
      'electronics',
      'appliances',
    ],
    'transfer': [
      'transfer',
      'sent to',
      'pay to',
      'upi',
      'gpay',
      'phonepe',
      'paytm',
      'money transfer',
      'fund transfer',
      'imps',
      'neft',
      'rtgs',
    ],
    'travel': [
      'uber',
      'ola',
      'rapido',
      'metro',
      'bus',
      'taxi',
      'cab',
      'railway',
      'irctc',
      'flight',
      'airline',
      'abhibus',
      'hotel booking',
      'travel',
      'booking',
      'makemytrip',
      'cleartrip',
      'goibibo',
      'redbus',
      'transport',
    ],
  };

  static const Map<String, List<String>> _creditKeywords = {
    'transfer': [
      'received from',
      'credited by',
      'transfer from',
      'received',
      'fund transfer',
      'imps',
      'neft',
      'rtgs',
      'upi credit',
    ],
    'deposit': [
      'cash deposit',
      'cheque deposit',
      'deposit',
      'deposited',
      'bank deposit',
      'atm deposit',
    ],
    'bill_payment': ['bill payment refund', 'utility refund', 'service refund'],
    'business': [
      'business',
      'merchant',
      'vendor payment',
      'supplier',
      'client payment',
      'invoice',
      'commercial',
    ],
    'credit': ['credit card payment', 'credit limit', 'credit adjustment'],
    'interest': [
      'interest',
      'savings interest',
      'fd interest',
      'fixed deposit interest',
      'interest credit',
      'int credit',
    ],
    'investment': [
      'dividend',
      'mutual fund',
      'investment return',
      'redemption',
      'maturity amount',
      'profit booking',
    ],
    'loan': [
      'loan disbursement',
      'loan amount',
      'personal loan credit',
      'home loan disbursement',
    ],
    'recharge': [
      'recharge',
      'mobile recharge',
      'dth recharge',
      'prepaid',
      'topup',
    ],
    'refund': [
      'refund',
      'refunded',
      'cashback',
      'return',
      'reversal',
      'chargeback',
      'amazon refund',
      'flipkart refund',
    ],
    'reimbursement': [
      'reimbursement',
      'expense',
      'petty cash',
      'travel allowance',
      'medical reimbursement',
    ],
    'reward': [
      'reward',
      'bonus',
      'loyalty',
      'points redemption',
      'gift voucher',
      'cashback',
      'offer',
      'promotion',
    ],
    'salary': [
      'salary',
      'sal credit',
      'payroll',
      'wage',
      'monthly salary',
      'salary transfer',
      'salary credited',
    ],
  };

  static String? classifyTransaction(
    String merchantName,
    SmsTransactionType type,
  ) {
    final lowerMerchantName = merchantName.toLowerCase();

    Map<String, List<String>> keywords;

    if (type == SmsTransactionType.debit) {
      keywords = _spendKeywords;
    } else if (type == SmsTransactionType.credit) {
      keywords = _creditKeywords;
    } else {
      return null;
    }

    // Check each category using word boundaries
    for (final entry in keywords.entries) {
      final category = entry.key;
      final categoryKeywords = entry.value;

      for (final keyword in categoryKeywords) {
        // Use word boundary regex to match whole words only
        final regex = RegExp(
          r'\b' + RegExp.escape(keyword.toLowerCase()) + r'\b',
        );
        if (regex.hasMatch(lowerMerchantName)) {
          return category;
        }
      }
    }

    return null; // No category found
  }
}
